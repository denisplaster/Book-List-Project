{"version":3,"sources":["components/Book.js","components/data.js","components/Booklist.js","App.js","serviceWorker.js","index.js"],"names":["Book","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","count","_this$props$info","info","img","title","author","deleteItem","react_default","a","createElement","className","src","width","alt","onClick","Component","books","id","Booklist","filterData","sortedBooks","filter","item","setState","booksData","_this2","map","book","Book_Book","key","App","components_Booklist","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEqBA,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,GAHQR,wEAOV,IAAAS,EACwBN,KAAKJ,MAAMW,KAAlCC,EADDF,EACCE,IAAKC,EADNH,EACMG,MAAOC,EADbJ,EACaI,OACZC,EAAeX,KAAKJ,MAApBe,WAER,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKR,EAAKS,MAAM,QAAQC,IAAI,SACjCN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBAAaL,GACbG,EAAAC,EAAAC,cAAA,kBAAUJ,GACVE,EAAAC,EAAAC,cAAA,UAAQK,QAASR,GAAjB,yBAlBwBS,cCmBnBC,EArBD,CACZ,CACEC,GAAI,EACJd,IAAK,8DACLC,MAAO,wCACPC,OAAQ,gBAEV,CACEY,GAAI,EACJd,IAAK,8DACLC,MAAO,4CACPC,OAAQ,gBAEV,CACEY,GAAI,EACJd,IAAK,8DACLC,MAAO,sCACPC,OAAQ,iBCmBGa,cA/Bb,SAAAA,EAAY3B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IACjB1B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyB,GAAApB,KAAAH,KAAMJ,KAOR4B,WAAa,SAAAF,GACX,IAAMG,EAAc5B,EAAKO,MAAMiB,MAAMK,OAAO,SAAAC,GAAI,OAAIA,EAAKL,KAAOA,IAChEzB,EAAK+B,SAAS,CACZP,MAAOI,KART5B,EAAKO,MAAQ,CACXiB,MAAOQ,GAJQhC,wEAeV,IAAAiC,EAAA9B,KACP,OACEY,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0CACCd,KAAKI,MAAMiB,MAAMU,IAAI,SAAAC,GAAI,OACxBpB,EAAAC,EAAAC,cAACmB,EAAD,CACEC,IAAKF,EAAKV,GACVf,KAAMyB,EACNrB,WAAY,kBAAMmB,EAAKN,WAAWQ,EAAKV,iBAxB5BF,aCURe,mLAPX,OACEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsB,EAAD,cAJUC,IAAMjB,WCOJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8e8bc333.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Book extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  render() {\n    const { img, title, author } = this.props.info;\n    const { deleteItem } = this.props;\n\n    return (\n      <div className=\"book\">\n        <img src={img} width=\"150px\" alt=\"book\" />\n        <div>\n          <h4>Title : {title}</h4>\n          <h6>By : {author}</h6>\n          <button onClick={deleteItem}> delete item</button>\n        </div>\n      </div>\n    );\n  }\n}\n","const books = [\n  {\n    id: 1,\n    img: \"https://m.media-amazon.com/images/I/91G2aMQuu9L._SX140_.jpg\",\n    title: \"Harry Potter and the Sorcerer's Stone\",\n    author: \"J.K. ROWLING\"\n  },\n  {\n    id: 2,\n    img: \"https://m.media-amazon.com/images/I/712nNwaEpzL._SX140_.jpg\",\n    title: \"Harry Potter and the Order of the Phoenix\",\n    author: \"J.K. ROWLING\"\n  },\n  {\n    id: 3,\n    img: \"https://m.media-amazon.com/images/I/81TRwlSwXKL._SX140_.jpg\",\n    title: \"Harry Potter and the Goblet of Fire\",\n    author: \"J.K. ROWLING\"\n  }\n];\n\nexport default books;\n","import React, { Component } from \"react\";\nimport Book from \"./Book\";\nimport booksData from \"./data\";\n\nclass Booklist extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      books: booksData\n    };\n  }\n\n  filterData = id => {\n    const sortedBooks = this.state.books.filter(item => item.id !== id);\n    this.setState({\n      books: sortedBooks\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h2>Best selling books this week</h2>\n        {this.state.books.map(book => (\n          <Book\n            key={book.id}\n            info={book}\n            deleteItem={() => this.filterData(book.id)}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Booklist;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Booklist from \"./components/Booklist.js\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Booklist />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}